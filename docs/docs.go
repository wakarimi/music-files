// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Dmitry Kolesnikov (Zalimannard)",
            "email": "zalimannard@mail.ru"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/audio-files": {
            "get": {
                "description": "Retrieves a list of all audioFiles in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AudioFiles"
                ],
                "summary": "Retrieve all audioFiles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/audio_file_handler.getAudioFilesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/audio-files/covers-top": {
            "put": {
                "description": "Retrieves a top of covers for audio file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Covers"
                ],
                "summary": "Retrieve top of covers for audio file",
                "parameters": [
                    {
                        "description": "Directory Data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/audio_file_handler.calcBestCoversRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/audio_file_handler.calcBestCoversResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/audio-files/sha256/{sha256}": {
            "get": {
                "description": "Retrieves a list of audioFiles that have the specified SHA256 hash.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AudioFiles"
                ],
                "summary": "Search audioFiles by SHA256 hash",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SHA256 hash",
                        "name": "sha256",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/audio_file_handler.searchBySha256Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/audio-files/{audioFileId}": {
            "get": {
                "description": "Retrieves a single audioFile by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AudioFiles"
                ],
                "summary": "Retrieve a audioFile by its ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "AudioFile ID",
                        "name": "audioFileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/audio_file_handler.getAudioFileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/audio-files/{audioFileId}/cover": {
            "get": {
                "description": "Retrieves detailed information about a cover for a audioFile by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Covers"
                ],
                "summary": "Retrieve a cover for a audioFile by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "AudioFile ID",
                        "name": "audioFileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/audio_file_handler.getCoverResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid audioFileId format",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Cover not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/audio-files/{audioFileId}/download": {
            "get": {
                "description": "Downloads a audio file identified by the audioFileId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "AudioFiles"
                ],
                "summary": "Download a audio file by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Audio File ID",
                        "name": "audioFileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audio File",
                        "schema": {
                            "type": "file"
                        },
                        "headers": {
                            "Content-Disposition": {
                                "type": "string",
                                "description": "attachment; filename=[name of the file]"
                            },
                            "Content-Type": {
                                "type": "string",
                                "description": "application/octet-stream"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid audioFileId format",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, Failed to calculate absolute path",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/covers/{coverId}": {
            "get": {
                "description": "Retrieves detailed information about a cover by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Covers"
                ],
                "summary": "Retrieve a cover by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cover ID",
                        "name": "coverId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cover_handler.getCoverResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid coverId format",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Cover not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/covers/{coverId}/download": {
            "get": {
                "description": "Downloads a cover image file identified by the coverId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Covers"
                ],
                "summary": "Download a cover image by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cover ID",
                        "name": "coverId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cover File",
                        "schema": {
                            "type": "file"
                        },
                        "headers": {
                            "Content-Disposition": {
                                "type": "string",
                                "description": "attachment; filename=[name of the file]"
                            },
                            "Content-Type": {
                                "type": "string",
                                "description": "application/octet-stream"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid coverId format",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, Failed to calculate absolute path",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/dirs/scan": {
            "post": {
                "description": "Initiates a scan in all directories to identify new or updated files.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Directories"
                ],
                "summary": "Scan all directories",
                "responses": {
                    "200": {
                        "description": "All directories scanned successfully"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/dirs/{dirId}": {
            "get": {
                "description": "Retrieves detailed information about a directory by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Directories"
                ],
                "summary": "Retrieve a directory by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Dir ID",
                        "name": "dirId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dir_handler.getDirResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid dirId format",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Directory not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/dirs/{dirId}/content": {
            "get": {
                "description": "Retrieves a list of subdirectories for a given directory ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Directories"
                ],
                "summary": "Retrieve content of a directory by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Directory ID",
                        "name": "dirId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dir_handler.contentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid dirId format",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Directory not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/dirs/{dirId}/scan": {
            "post": {
                "description": "Initiates a scan in the specified directory to identify new or updated files.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Directories"
                ],
                "summary": "Scan a directory by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Directory ID",
                        "name": "dirId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Directory scanned successfully"
                    },
                    "400": {
                        "description": "Invalid dirId format",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Directory not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/roots": {
            "get": {
                "description": "Retrieves a list of all root directories that are tracked",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Directories"
                ],
                "summary": "Retrieve root directories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dir_handler.getRootsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new directory to the database for tracking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Directories"
                ],
                "summary": "Add a new tracked directory",
                "parameters": [
                    {
                        "description": "Directory Data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dir_handler.addRootToWatchListRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dir_handler.addRootToWatchListResponse"
                        }
                    },
                    "400": {
                        "description": "Failed to decode request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Directory not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "409": {
                        "description": "Directory already tracked",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/roots/{dirId}": {
            "delete": {
                "description": "Stops tracking a directory with a specified root directory ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Directories"
                ],
                "summary": "Remove a tracked root directory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Root Directory ID",
                        "name": "dirId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid dirId format, The directory is not root",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Directory not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "audio_file_handler.calcBestCoversRequest": {
            "type": "object",
            "properties": {
                "audioFiles": {
                    "description": "List of audio files to find their most suitable covers",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "audio_file_handler.calcBestCoversResponse": {
            "type": "object",
            "properties": {
                "coversTop": {
                    "description": "Top suitable covers by frequency of occurrence",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "audio_file_handler.getAudioFileResponse": {
            "type": "object",
            "properties": {
                "audioFileId": {
                    "description": "Unique identifier for the audioFile",
                    "type": "integer"
                },
                "bitrateKbps": {
                    "description": "Bitrate in kilobits per second",
                    "type": "integer"
                },
                "channelsN": {
                    "description": "Number of audio channels",
                    "type": "integer"
                },
                "dirId": {
                    "description": "Directory identifier where the audioFile resides",
                    "type": "integer"
                },
                "durationMs": {
                    "description": "Duration of the audioFile in milliseconds",
                    "type": "integer"
                },
                "extension": {
                    "description": "File extension of the audioFile",
                    "type": "string"
                },
                "filename": {
                    "description": "Filename of the audioFile",
                    "type": "string"
                },
                "lastContentUpdate": {
                    "description": "Time of the last update to the audioFile's content",
                    "type": "string"
                },
                "sampleRateHz": {
                    "description": "Sample rate in hertz",
                    "type": "integer"
                },
                "sha256": {
                    "description": "SHA-256 hash of the file",
                    "type": "string"
                },
                "sizeByte": {
                    "description": "File size in bytes",
                    "type": "integer"
                }
            }
        },
        "audio_file_handler.getAudioFilesResponse": {
            "type": "object",
            "properties": {
                "audioFiles": {
                    "description": "Array containing audioFile items",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/audio_file_handler.getAudioFilesResponseItem"
                    }
                }
            }
        },
        "audio_file_handler.getAudioFilesResponseItem": {
            "type": "object",
            "properties": {
                "audioFileId": {
                    "description": "Unique identifier for the audioFile",
                    "type": "integer"
                },
                "bitrateKbps": {
                    "description": "Bitrate in kilobits per second",
                    "type": "integer"
                },
                "channelsN": {
                    "description": "Number of audio channels",
                    "type": "integer"
                },
                "dirId": {
                    "description": "Directory identifier where the audioFile resides",
                    "type": "integer"
                },
                "durationMs": {
                    "description": "Duration of the audioFile in milliseconds",
                    "type": "integer"
                },
                "extension": {
                    "description": "File extension of the audioFile",
                    "type": "string"
                },
                "filename": {
                    "description": "Filename of the audioFile",
                    "type": "string"
                },
                "lastContentUpdate": {
                    "description": "Time of the last update to the audioFile's content",
                    "type": "string"
                },
                "sampleRateHz": {
                    "description": "Sample rate in hertz",
                    "type": "integer"
                },
                "sha256": {
                    "description": "SHA-256 hash of the file",
                    "type": "string"
                },
                "sizeByte": {
                    "description": "File size in bytes",
                    "type": "integer"
                }
            }
        },
        "audio_file_handler.getCoverResponse": {
            "type": "object",
            "properties": {
                "coverId": {
                    "description": "Unique identifier for the cover.",
                    "type": "integer"
                },
                "extension": {
                    "description": "File extension of the cover.",
                    "type": "string"
                },
                "heightPx": {
                    "description": "Height of the cover in pixels.",
                    "type": "integer"
                },
                "lastContentUpdate": {
                    "description": "Timestamp of the last content update.",
                    "type": "string"
                },
                "sha256": {
                    "description": "SHA-256 hash of the cover.",
                    "type": "string"
                },
                "sizeByte": {
                    "description": "File size of the cover in bytes.",
                    "type": "integer"
                },
                "widthPx": {
                    "description": "Width of the cover in pixels.",
                    "type": "integer"
                }
            }
        },
        "audio_file_handler.searchBySha256Response": {
            "type": "object",
            "properties": {
                "audioFiles": {
                    "description": "Array of audioFiles that match the search query.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/audio_file_handler.searchBySha256ResponseItem"
                    }
                }
            }
        },
        "audio_file_handler.searchBySha256ResponseItem": {
            "type": "object",
            "properties": {
                "audioFileId": {
                    "description": "Unique identifier for the audioFile.",
                    "type": "integer"
                },
                "bitrateKbps": {
                    "description": "Bitrate of the audioFile in Kbps.",
                    "type": "integer"
                },
                "channelsN": {
                    "description": "Number of channels in the audioFile.",
                    "type": "integer"
                },
                "dirId": {
                    "description": "Directory ID where the audioFile is located.",
                    "type": "integer"
                },
                "durationMs": {
                    "description": "Duration of the audioFile in milliseconds.",
                    "type": "integer"
                },
                "extension": {
                    "description": "File extension of the audioFile.",
                    "type": "string"
                },
                "filename": {
                    "description": "Filename of the audioFile.",
                    "type": "string"
                },
                "lastContentUpdate": {
                    "description": "Timestamp of the last content update.",
                    "type": "string"
                },
                "sampleRateHz": {
                    "description": "Sample rate of the audioFile in Hz.",
                    "type": "integer"
                },
                "sha256": {
                    "description": "SHA-256 hash of the audioFile.",
                    "type": "string"
                },
                "sizeByte": {
                    "description": "File size of the audioFile in bytes.",
                    "type": "integer"
                }
            }
        },
        "cover_handler.getCoverResponse": {
            "type": "object",
            "properties": {
                "coverId": {
                    "description": "Unique identifier for the cover",
                    "type": "integer"
                },
                "extension": {
                    "description": "File extension of the cover",
                    "type": "string"
                },
                "heightPx": {
                    "description": "Height of the cover in pixels",
                    "type": "integer"
                },
                "lastContentUpdate": {
                    "description": "Timestamp of the last content update",
                    "type": "string"
                },
                "sha256": {
                    "description": "SHA-256 hash of the cover",
                    "type": "string"
                },
                "sizeByte": {
                    "description": "File size of the cover in bytes",
                    "type": "integer"
                },
                "widthPx": {
                    "description": "Width of the cover in pixels",
                    "type": "integer"
                }
            }
        },
        "dir_handler.addRootToWatchListRequest": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "Path to the directory on disk",
                    "type": "string"
                }
            }
        },
        "dir_handler.addRootToWatchListResponse": {
            "type": "object",
            "properties": {
                "dirId": {
                    "description": "Unique identifier of the directory in the database",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the directory",
                    "type": "string"
                }
            }
        },
        "dir_handler.contentResponse": {
            "type": "object",
            "properties": {
                "audioFiles": {
                    "description": "Array containing audioFile items",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dir_handler.contentResponseAudioFileItem"
                    }
                },
                "dirs": {
                    "description": "Array containing directory items",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dir_handler.contentResponseDirItem"
                    }
                }
            }
        },
        "dir_handler.contentResponseAudioFileItem": {
            "type": "object",
            "properties": {
                "audioFileId": {
                    "description": "Unique identifier for the audioFile",
                    "type": "integer"
                },
                "bitrateKbps": {
                    "description": "Bitrate in kilobits per second",
                    "type": "integer"
                },
                "channelsN": {
                    "description": "Number of audio channels",
                    "type": "integer"
                },
                "dirId": {
                    "description": "Directory identifier where the audioFile resides",
                    "type": "integer"
                },
                "durationMs": {
                    "description": "Duration of the audioFile in milliseconds",
                    "type": "integer"
                },
                "extension": {
                    "description": "File extension of the audioFile",
                    "type": "string"
                },
                "filename": {
                    "description": "Filename of the audioFile",
                    "type": "string"
                },
                "lastContentUpdate": {
                    "description": "Time of the last update to the audioFile's content",
                    "type": "string"
                },
                "sampleRateHz": {
                    "description": "Sample rate in hertz",
                    "type": "integer"
                },
                "sha256": {
                    "description": "SHA-256 hash of the file",
                    "type": "string"
                },
                "sizeByte": {
                    "description": "File size in bytes",
                    "type": "integer"
                }
            }
        },
        "dir_handler.contentResponseDirItem": {
            "type": "object",
            "properties": {
                "dirId": {
                    "description": "Unique identifier for the directory",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the directory",
                    "type": "string"
                }
            }
        },
        "dir_handler.getDirResponse": {
            "type": "object",
            "properties": {
                "absolutePath": {
                    "description": "Absolute path to directory",
                    "type": "string"
                },
                "dirId": {
                    "description": "Unique identifier for the directory",
                    "type": "integer"
                },
                "lastScanned": {
                    "description": "Last time the directory was scanned",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the directory",
                    "type": "string"
                }
            }
        },
        "dir_handler.getRootsResponse": {
            "type": "object",
            "properties": {
                "dirs": {
                    "description": "Array containing root directories",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dir_handler.getRootsResponseItem"
                    }
                }
            }
        },
        "dir_handler.getRootsResponseItem": {
            "type": "object",
            "properties": {
                "dirId": {
                    "description": "Unique identifier for the directory",
                    "type": "integer"
                },
                "lastScanned": {
                    "description": "Last time the directory was scanned",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the directory",
                    "type": "string"
                }
            }
        },
        "response.Error": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Human-readable error message",
                    "type": "string"
                },
                "reason": {
                    "description": "Internal error description",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.4",
	Host:             "localhost:8022",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Wakarimi Music Files API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
